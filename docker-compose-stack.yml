version: '3'
services:
  reverse-proxy:
          image: traefik
          command:
              - "--api.insecure=true"
              - "--metrics.influxdb.address=influxdb:8086"
              - "--metrics.influxdb.database=telegraf"
              - "--metrics.influxdb.username=telegraf"
              - "--metrics.influxdb.password=telegraf"
              - "--metrics.influxdb.protocol=http"
              - "--accesslog=true"
              - "--providers.docker.endpoint=unix:///var/run/docker.sock"  
              - "--providers.docker=true"
              - "--api.insecure=true"
              - "--providers.docker.exposedbydefault=false"
              - "--entrypoints.web.address=:80"
          ports:
                # The HTTP port
                - "80:80"
          volumes:
          # So that Traefik can listen to the Docker events
          - /var/run/docker.sock:/var/run/docker.sock
          labels:
              - "traefik.enable=True"
              - "traefik.http.routers.dashboard.rule=Host(`0.0.0.0`) && PathPrefix(`/`)"
              - "treafik.http.routers.dashboard.service=api@internal"
              - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
              - "traefik.port=8080"
              - "traefik.http.routers.dashboard.middlewares=traefik-auth"
              - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$8EVjn/nj$$GiLUZqcbueTFeD23SuB6x0"
          restart: always
  database:
    image: postgres:alpine
    container_name: database
    env_file:
      - .env/postgres.env
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "${DB_NAME}", "-U", "postgres" ]
            timeout: 45s
            interval: 10s
            retries: 10
    restart: always
    

  django:
    image: smvsite/smvsite
    env_file:
      - .env/django.env
    volumes:
            - ./django-media:/code/smvsite/media
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`127.0.0.1`) && PathPrefix(`/`)"
      - "traefik.http.services.django.loadbalancer.server.port=8000"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.port=8000"
    restart: always
    entrypoint: gunicorn -b 0.0.0.0:8000 smvsite.wsgi_without_static

  influxdb:
      image: influxdb
      env_file:
        - .env/influxdb.env
      volumes:
        - ./influxdb:/var/lib/influxdb
        - ./influxdb.conf:/etc/influxdb/inluxdb.conf
      restart: always
  telegraf:
    image: telegraf
    links:
        - influxdb
    environment:
        HOST_PROC: /rootfs/proc
        HOST_SYS: /rootfs/sys
        HOST_ETC: /rootfs/etc
    volumes:
        - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - /sys:/rootfs/sys:ro
        - /proc:/rootfs/proc:ro
        - /etc:/rootfs/etc:ro
    restart: always

  grafana:
      image: grafana/grafana
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`localhost`)"
      links:
          - influxdb
      volumes:
        - ./grafana:/var/lib/grafana
      restart: always
  
  redis:
        image: redis
        container_name: redis
        restart: always
  staticfiles:
          image: smvsite/static
          labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.staticfiles.rule=Host(`127.0.0.1`) && PathPrefix(`/static`) || PathPrefix(`/media`)"
                  - "traefik.http.routers.traefik.entrypoints=web"
                  - "traefik.http.services.staticfiles.loadbalancer.server.port=80"
          volumes:
                - ./django-media:/usr/share/nginx/html/media


